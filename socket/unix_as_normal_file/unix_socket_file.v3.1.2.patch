From ec9ba725970fdd9f480ee41fa6fffd18a34d5632 Mon Sep 17 00:00:00 2001
From: Brook <rene3210@gmail.com>
Date: Thu, 1 Dec 2011 21:44:34 +0800
Subject: [PATCH] apply patch     "Allow Unix sockets to be treated like
 normal files"

---
 include/net/af_unix.h |    3 +
 net/unix/Kconfig      |   10 +++
 net/unix/af_unix.c    |  175 +++++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 188 insertions(+), 0 deletions(-)

diff --git a/include/net/af_unix.h b/include/net/af_unix.h
index 91ab5b0..6defaa9 100644
--- a/include/net/af_unix.h
+++ b/include/net/af_unix.h
@@ -58,6 +58,9 @@ struct unix_sock {
 	unsigned int		gc_maybe_cycle : 1;
 	unsigned char		recursion_level;
 	struct socket_wq	peer_wq;
+#ifdef CONFIG_UNIX_FOPS
+	struct socket 		*fops_socket;
+#endif
 };
 #define unix_sk(__sk) ((struct unix_sock *)__sk)
 
diff --git a/net/unix/Kconfig b/net/unix/Kconfig
index 5a69733..dbfce3f 100644
--- a/net/unix/Kconfig
+++ b/net/unix/Kconfig
@@ -19,3 +19,13 @@ config UNIX
 
 	  Say Y unless you know what you are doing.
 
+config UNIX_FOPS
+   boolean "Allow Unix sockets to be treated like normal files"
+   depends on UNIX
+   ---help---
+     If you say Y here, Unix sockets may be opened, written, read, and
+     closed, like normal files.  This is handy for sending short commands
+     to Unix sockets (i.e. from shell scripts), without having to create
+     a Unix socket.
+
+     Say Y unless you know what you are doing.
diff --git a/net/unix/af_unix.c b/net/unix/af_unix.c
index ec68e1c..0de481a 100644
--- a/net/unix/af_unix.c
+++ b/net/unix/af_unix.c
@@ -801,6 +801,178 @@ fail:
 	return NULL;
 }
 
+#ifdef CONFIG_UNIX_FOPS
+struct sock *unix_fops_find_by_filp(struct file *filp,
+   struct sockaddr_un *sunaddr, unsigned int *_alen)
+{
+   int hash, nlen, alen, retval;
+   struct sock *sock = NULL;
+   struct net *net = &init_net;
+   char *p;
+   struct dentry *dentry = filp->f_dentry;
+
+   retval = -EINVAL;
+   if (!filp)
+       goto error;
+   dentry = filp->f_dentry;
+
+   if (!dentry || !dentry->d_parent)
+       goto error;
+
+   sunaddr->sun_family = AF_UNIX;
+   p = d_path(&filp->f_path, sunaddr->sun_path, sizeof(sunaddr->sun_path));
+   if (IS_ERR(p))
+       return (void *)p;
+   if (!p)
+       goto error;
+   nlen = strnlen(p, sizeof(sunaddr->sun_path) -
+             (p - sunaddr->sun_path));
+
+   memmove(sunaddr->sun_path, p, nlen);
+   alen = nlen;
+   if (nlen < sizeof(sunaddr->sun_path)) {
+       sunaddr->sun_path[nlen] = 0;
+       alen++;
+   }
+   alen += sizeof(sunaddr->sun_family);
+
+   if (_alen)
+       *_alen = alen;
+
+   hash = dentry->d_inode->i_ino & (UNIX_HASH_SIZE-1);
+   sock = unix_find_socket_byname(net, sunaddr, alen, 0, hash);
+
+error:
+   if (sock)
+       return sock;
+   else
+       return ERR_PTR(retval);
+}
+
+static int unix_open(struct inode *inode, struct file *filp)
+{
+   int err, alen;
+   struct socket *sock = NULL;
+   struct sock *usock;
+   struct unix_sock *u = NULL;
+   struct sockaddr_un sunaddr = { 0 };
+
+   usock = unix_fops_find_by_filp(filp, &sunaddr, &alen);
+   if (IS_ERR(usock))
+       return PTR_ERR(usock);
+   u = unix_sk(usock);
+   err = -EBUSY;
+   if (u->fops_socket)
+       goto error;
+
+   err = sock_create_kern(PF_UNIX, usock->sk_type, 0, &sock);
+   if (err)
+       goto error;
+
+   err = sock->ops->connect(sock, (struct sockaddr *)&sunaddr,
+                alen, 0);
+   if (err) {
+       sock_release(sock);
+       goto error;
+   }
+   u->fops_socket = sock;
+
+   /* FALLTHROUGH */
+error:
+   sock_put(usock);
+
+   return err;
+}
+
+static int unix_frelease(struct inode *inode, struct file *filp)
+{
+   int retval;
+   struct socket *sock;
+   struct sock *usock;
+   struct unix_sock *u;
+   struct sockaddr_un sunaddr;
+
+   usock = unix_fops_find_by_filp(filp, &sunaddr, NULL);
+   if (IS_ERR(usock))
+       return PTR_ERR(usock);
+   u = unix_sk(usock);
+   sock = u->fops_socket;
+   retval = -EINVAL;
+   if (!sock)
+       goto error;
+   u->fops_socket = NULL;
+   sock_release(sock);
+   retval = 0;
+
+   /* FALLTHROUGH */
+error:
+   sock_put(usock);
+   return retval;
+}
+
+static ssize_t unix_readwrite(struct file *filp, void *buf,
+   size_t _len, loff_t *ppos, int do_write)
+{
+   int len = (int)_len, err = 0;
+   struct kvec iov = {
+       .iov_base = buf,
+       .iov_len = len,
+   };
+   struct msghdr msg = {
+       /* NB: struct iovec and kvec are equal */
+       .msg_iov = (struct iovec *)&iov,
+       .msg_iovlen = 1,
+   };
+   struct socket *sock;
+   struct sock *usock;
+   struct unix_sock *u;
+   struct sockaddr_un sunaddr;
+
+   usock = unix_fops_find_by_filp(filp, &sunaddr, NULL);
+   if (IS_ERR(usock))
+       return PTR_ERR(usock);
+   u = unix_sk(usock);
+   sock = u->fops_socket;
+   err = -EINVAL;
+   if (!sock)
+       goto error;
+
+   err = -E2BIG;
+   if (_len > 0xffffffffLL)
+       goto error;
+
+   err = do_write ? sock_sendmsg(sock, &msg, len) :
+            sock_recvmsg(sock, &msg, len, 0);
+   if (err > 0 && ppos)
+       *ppos += err;
+
+   /* FALLTHROUGH */
+error:
+   sock_put(usock);
+
+   return err;
+}
+
+static ssize_t unix_write(struct file *filp, const char __user *buf,
+   size_t _len, loff_t *ppos)
+{
+   return unix_readwrite(filp, (void *)buf, _len, ppos, 1);
+}
+
+static ssize_t unix_read(struct file *filp, char __user *buf,
+   size_t _len, loff_t *ppos)
+{
+   return unix_readwrite(filp, (void *)buf, _len, ppos, 0);
+}
+
+const struct file_operations unix_sock_fops = {
+   .owner = THIS_MODULE,
+   .open = unix_open,
+   .release = unix_frelease,
+   .write = unix_write,
+   .read = unix_read,
+};
+#endif /* CONFIG_UNIX_FOPS */
 
 static int unix_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)
 {
@@ -874,6 +1046,9 @@ out_mknod_drop_write:
 		mnt_drop_write(path.mnt);
 		if (err)
 			goto out_mknod_dput;
+#ifdef CONFIG_UNIX_FOPS
+			dentry->d_inode->i_fop = &unix_sock_fops;
+#endif
 		mutex_unlock(&path.dentry->d_inode->i_mutex);
 		dput(path.dentry);
 		path.dentry = dentry;
-- 
1.7.5.4

